diff --git a/classes/Api.php b/classes/Api.php
index 2fdd746..159363c 100644
--- a/classes/Api.php
+++ b/classes/Api.php
@@ -7,14 +7,14 @@
  * @since      File available since Release 1.0.0
  */
 
-namespace TCCSolution;
+namespace RoboticEvent;
 
 use Slim\Http\Util;
 use Slim\Slim;
-use TCCSolution\Util\ArrayUtils;
-use TCCSolution\Slim\BaseResponse;
-use TCCSolution\Slim\BaseRequest;
-use TCCSolution\Slim\Environment;
+use RoboticEvent\Util\ArrayUtils;
+use RoboticEvent\Slim\BaseResponse;
+use RoboticEvent\Slim\BaseRequest;
+use RoboticEvent\Slim\Environment;
 
 /**
  * Api
diff --git a/classes/Database/DbCore.php b/classes/Database/DbCore.php
index 7de11dc..259a826 100644
--- a/classes/Database/DbCore.php
+++ b/classes/Database/DbCore.php
@@ -1,18 +1,18 @@
 <?php
 /**
- * @package    TCCSolution
+ * @package    RoboticEvent
  * @author     davisonpro.coder@gmail.com
- * @copyright  2018 TCCSolution
+ * @copyright  2018 RoboticEvent
  * @version    1.0.0
  * @since      File available since Release 1.0.0
  */
 
-namespace TCCSolution\Database;
+namespace RoboticEvent\Database;
 
 use Db;
 use DbPDO;
 use DbMySQLi;
-use TCCSolution\Tools;
+use RoboticEvent\Tools;
 
 /**
  * Class DbCore
diff --git a/classes/Database/DbMySQLiCore.php b/classes/Database/DbMySQLiCore.php
index 70ccc8e..f0ac50d 100644
--- a/classes/Database/DbMySQLiCore.php
+++ b/classes/Database/DbMySQLiCore.php
@@ -1,16 +1,16 @@
 <?php
 /**
- * @package    TCCSolution
+ * @package    RoboticEvent
  * @author     davisonpro.coder@gmail.com
- * @copyright  2018 TCCSolution
+ * @copyright  2018 RoboticEvent
  * @version    1.0.0
  * @since      File available since Release 1.0.0
  */
 
-namespace TCCSolution\Database;
+namespace RoboticEvent\Database;
 
 use Db;
-use TCCSolution\Tools;
+use RoboticEvent\Tools;
 
 /**
  * Class DbMySQLiCore
diff --git a/classes/Database/DbPDOCore.php b/classes/Database/DbPDOCore.php
index 23ea9e9..85a5e96 100644
--- a/classes/Database/DbPDOCore.php
+++ b/classes/Database/DbPDOCore.php
@@ -1,13 +1,13 @@
 <?php
 /**
- * @package    TCCSolution
+ * @package    RoboticEvent
  * @author     davisonpro.coder@gmail.com
- * @copyright  2018 TCCSolution
+ * @copyright  2018 RoboticEvent
  * @version    1.0.0
  * @since      File available since Release 1.0.0
  */
 
-namespace TCCSolution\Database;
+namespace RoboticEvent\Database;
 
 use Db;
 use \PDO;
diff --git a/classes/Database/DbQuery.php b/classes/Database/DbQuery.php
index add5e2b..a17478b 100644
--- a/classes/Database/DbQuery.php
+++ b/classes/Database/DbQuery.php
@@ -1,13 +1,13 @@
 <?php
 /**
- * @package    TCCSolution
+ * @package    RoboticEvent
  * @author     davisonpro.coder@gmail.com
- * @copyright  2018 TCCSolution
+ * @copyright  2018 RoboticEvent
  * @version    1.0.0
  * @since      File available since Release 1.0.0
  */
 
-namespace TCCSolution\Database;
+namespace RoboticEvent\Database;
 
 /**
  * SQL query builder
diff --git a/classes/ObjectModel.php b/classes/ObjectModel.php
index 863c716..9cf370c 100644
--- a/classes/ObjectModel.php
+++ b/classes/ObjectModel.php
@@ -7,13 +7,13 @@
  * @since      File available since Release 1.0.0
  */
 
-namespace TCCSolution; 
+namespace RoboticEvent; 
 
 use Db;
-use TCCSolution\Database\DbQuery;
-use TCCSolution\Validate;
-use TCCSolution\Database\EntityInterface;
-use TCCSolution\Database\EntityMapper;
+use RoboticEvent\Database\DbQuery;
+use RoboticEvent\Validate;
+use RoboticEvent\Database\EntityInterface;
+use RoboticEvent\Database\EntityMapper;
 
 /**
  * ObjectModel
@@ -449,7 +449,7 @@ class ObjectModel {
 
         // Check field validator
         if (!in_array('validate', $skip) && !empty($data['validate'])) {
-            if (!method_exists('TCCSolution\Validate', $data['validate'])) {
+            if (!method_exists('RoboticEvent\Validate', $data['validate'])) {
                 throw new \Exception(
                     sprintf('Validation function not found: %s.', $data['validate'])
                 );
@@ -458,11 +458,11 @@ class ObjectModel {
             if (!empty($value)) {
                 $res = true;
                 if (Tools::strtolower($data['validate']) == 'iscleanhtml') {
-                    if (!call_user_func(array('TCCSolution\Validate', $data['validate']), $value, $hp_allow_html_iframe)) {
+                    if (!call_user_func(array('RoboticEvent\Validate', $data['validate']), $value, $hp_allow_html_iframe)) {
                         $res = false;
                     }
                 } else {
-                    if (!call_user_func(array('TCCSolution\Validate', $data['validate']), $value)) {
+                    if (!call_user_func(array('RoboticEvent\Validate', $data['validate']), $value)) {
                         $res = false;
                     }
                 }
diff --git a/classes/Route.php b/classes/Route.php
index 2f89a24..4c655f5 100644
--- a/classes/Route.php
+++ b/classes/Route.php
@@ -7,9 +7,9 @@
  * @since      File available since Release 1.0.0
  */
 
-namespace TCCSolution;
+namespace RoboticEvent;
 
-use TCCSolution\Api;
+use RoboticEvent\Api;
 
 abstract class Route
 {
diff --git a/classes/Slim/BaseRequest.php b/classes/Slim/BaseRequest.php
index e722527..da8b1f6 100644
--- a/classes/Slim/BaseRequest.php
+++ b/classes/Slim/BaseRequest.php
@@ -7,7 +7,7 @@
  * @since      File available since Release 1.0.0
  */
 
-namespace TCCSolution\Slim;
+namespace RoboticEvent\Slim;
 
 use Slim\Http\Request;
 use Slim\Http\Util;
diff --git a/classes/Slim/BaseResponse.php b/classes/Slim/BaseResponse.php
index 702b03e..0c0b22b 100644
--- a/classes/Slim/BaseResponse.php
+++ b/classes/Slim/BaseResponse.php
@@ -7,7 +7,7 @@
  * @since      File available since Release 1.0.0
  */
 
-namespace TCCSolution\Slim;
+namespace RoboticEvent\Slim;
 
 use Slim\Http\Response;
 
diff --git a/classes/Slim/CorsMiddleware.php b/classes/Slim/CorsMiddleware.php
index eaea732..e727e1e 100644
--- a/classes/Slim/CorsMiddleware.php
+++ b/classes/Slim/CorsMiddleware.php
@@ -7,10 +7,10 @@
  * @since      File available since Release 1.0.0
  */
 
-namespace TCCSolution\Slim;
+namespace RoboticEvent\Slim;
 
-use TCCSolution\Util\ArrayUtils;
-use TCCSolution\Util\StringUtils;
+use RoboticEvent\Util\ArrayUtils;
+use RoboticEvent\Util\StringUtils;
 
 use Slim\Middleware;
 
diff --git a/classes/Slim/Environment.php b/classes/Slim/Environment.php
index 9b8456f..8e638b4 100644
--- a/classes/Slim/Environment.php
+++ b/classes/Slim/Environment.php
@@ -7,7 +7,7 @@
  * @since      File available since Release 1.0.0
  */
 
-namespace TCCSolution\Slim;
+namespace RoboticEvent\Slim;
 
 /**
  * Application Environment variables
diff --git a/classes/Tools.php b/classes/Tools.php
index 951270f..3ce1612 100644
--- a/classes/Tools.php
+++ b/classes/Tools.php
@@ -1,13 +1,13 @@
 <?php 
 /**
- * @package    TCCSolution
+ * @package    RoboticEvent
  * @author     Davison Pro <davisonpro.coder@gmail.com>
- * @copyright  2018 TCCSolution
+ * @copyright  2018 RoboticEvent
  * @version    1.0.0
  * @since      File available since Release 1.0.0
  */
 
-namespace TCCSolution;
+namespace RoboticEvent;
 
 class Tools {
 
diff --git a/classes/Util/ArrayUtils.php b/classes/Util/ArrayUtils.php
index 50989d6..e50419b 100644
--- a/classes/Util/ArrayUtils.php
+++ b/classes/Util/ArrayUtils.php
@@ -7,7 +7,7 @@
  * @since      File available since Release 1.0.0
  */
 
-namespace TCCSolution\Util;
+namespace RoboticEvent\Util;
 
 class ArrayUtils {
     /**
diff --git a/classes/Util/StringUtils.php b/classes/Util/StringUtils.php
index 60b3597..9728488 100644
--- a/classes/Util/StringUtils.php
+++ b/classes/Util/StringUtils.php
@@ -7,7 +7,7 @@
  * @since      File available since Release 1.0.0
  */
 
-namespace TCCSolution\Util;
+namespace RoboticEvent\Util;
 
 class StringUtils
 {
diff --git a/classes/Validate.php b/classes/Validate.php
index d42f16b..9e8d9ae 100644
--- a/classes/Validate.php
+++ b/classes/Validate.php
@@ -1,20 +1,20 @@
 <?php
 /**
- * @package    TCCSolution
+ * @package    RoboticEvent
  * @author     Davison Pro <davisonpro.coder@gmail.com>
- * @copyright  2018 TCCSolution
+ * @copyright  2018 RoboticEvent
  * @version    1.0.0
  * @since      File available since Release 1.0.0
  */
 
-namespace TCCSolution;
+namespace RoboticEvent;
 
-use TCCSolution\Tools;
+use RoboticEvent\Tools;
 
 /**
  * Class Validate
  *
- * @package TCCSolution
+ * @package RoboticEvent
  */
 class Validate
 {
diff --git a/controllers/v1/Person.php b/controllers/v1/Person.php
index 58959b0..8d26685 100644
--- a/controllers/v1/Person.php
+++ b/controllers/v1/Person.php
@@ -7,15 +7,15 @@
  * @since      File available since Release 1.0.0
  */
 
-/*namespace TCCSolution\v1;
+/*namespace RoboticEvent\v1;
 
 use Db;
-use TCCSolution\Route;
-use TCCSolution\Database\DbQuery;
-use TCCSolution\Entities\Person as PersonObject;
-use TCCSolution\Entities\Team as TeamObject;
-use TCCSolution\Util\ArrayUtils;
-use TCCSolution\Validate;
+use RoboticEvent\Route;
+use RoboticEvent\Database\DbQuery;
+use RoboticEvent\Entities\Person as PersonObject;
+use RoboticEvent\Entities\Team as TeamObject;
+use RoboticEvent\Util\ArrayUtils;
+use RoboticEvent\Validate;
 
 class Person extends Route {
 
diff --git a/index.php b/index.php
index cb98aea..f479a00 100644
--- a/index.php
+++ b/index.php
@@ -8,7 +8,7 @@
  */
 
  // Namespaces
-define('API_NAMESPACE',          'TCCSolution');
+define('API_NAMESPACE',          'TccSolution');
 define('API_DIR_ROOT',            dirname(__FILE__));
 define('API_DIR_CLASSES',         API_DIR_ROOT . DIRECTORY_SEPARATOR . 'classes' . DIRECTORY_SEPARATOR);
 define('API_DIR_CONTROLLERS',     API_DIR_ROOT . DIRECTORY_SEPARATOR . 'controllers' . DIRECTORY_SEPARATOR);
@@ -19,11 +19,11 @@ require_once API_DIR_ROOT . DIRECTORY_SEPARATOR . 'functions.php';
 
 require_once API_DIR_ROOT . DIRECTORY_SEPARATOR . 'env.php';
 
-use TCCSolution\Api;
-use TCCSolution\Database\DbQuery;
-use TCCSolution\Database\DbCore;
-use TCCSolution\Database\DbPDOCore;
-use TCCSolution\Database\DbMySQLiCore;
+use TccSolution\Api;
+use TccSolution\Database\DbQuery;
+use TccSolution\Database\DbCore;
+use TccSolution\Database\DbPDOCore;
+use TccSolution\Database\DbMySQLiCore;
 
 abstract class Db extends DbCore {};
 class DbPDO extends DbPDOCore {};
@@ -69,7 +69,7 @@ $api = new Api([
     'debug' => true
 ]);
 
-$api->add(new \TCCSolution\Slim\CorsMiddleware());
+$api->add(new \TccSolution\Slim\CorsMiddleware());
 $api->config('debug', true);
 
 /**
@@ -81,106 +81,106 @@ $requestPayload = $api->request->post();
 $api->group('/api', function () use ($api) {
 	$api->group('/v1', function () use ($api) {
 		/** Get all People */
-		//$api->get('/people?', '\TCCSolution\v1\Person:getPeople')->name('get_people');
+		//$api->get('/people?', '\TccSolution\v1\Person:getPeople')->name('get_people');
 		
 		/** Get people by Team */
-		//$api->get('/people/team/:teamId:?', '\TCCSolution\v1\Person:getPeople')->name('get_people');
+		//$api->get('/people/team/:teamId:?', '\TccSolution\v1\Person:getPeople')->name('get_people');
 
 		/** Get people by Event */
-		//$api->get('/people/event/:eventId:?', '\TCCSolution\v1\Person:getPeopleByEventId')->name('get_people_by_event_id');
+		//$api->get('/people/event/:eventId:?', '\TccSolution\v1\Person:getPeopleByEventId')->name('get_people_by_event_id');
 
 		/** Get person by Email */
-		//$api->get('/people/email?', '\TCCSolution\v1\Person:getPersonByEmail')->name('get_people_by_email');
+		//$api->get('/people/email?', '\TccSolution\v1\Person:getPersonByEmail')->name('get_people_by_email');
 
 		/** Add a Person */
-		//$api->post('/people?', '\TCCSolution\v1\Person:addPerson')->name('add_people');
+		//$api->post('/people?', '\TccSolution\v1\Person:addPerson')->name('add_people');
 	
 		// /** Get a single Person */
-		//$api->get('/people/:personId?', '\TCCSolution\v1\Person:getPerson')->name('get_person');
+		//$api->get('/people/:personId?', '\TccSolution\v1\Person:getPerson')->name('get_person');
 
 		// /** Update a single Person */
-		//$api->patch('/people/:personId?', '\TCCSolution\v1\Person:updatePerson')->name('update_person');
+		//$api->patch('/people/:personId?', '\TccSolution\v1\Person:updatePerson')->name('update_person');
 	
 		// /** Delete a Person */
-		// $api->delete('/people/:personId?', '\TCCSolution\v1\Person:deletePerson')->name('delete_person');
+		// $api->delete('/people/:personId?', '\TccSolution\v1\Person:deletePerson')->name('delete_person');
 
 		// /** search people */
-		// $api->get('/people/search?', '\TCCSolution\v1\Person:searchPeople')->name('search_people');
+		// $api->get('/people/search?', '\TccSolution\v1\Person:searchPeople')->name('search_people');
 		
 		/** Get all Teams */
-		//$api->get('/teams?', '\TCCSolution\v1\Team:getTeams')->name('get_teams');
+		//$api->get('/teams?', '\TccSolution\v1\Team:getTeams')->name('get_teams');
 		
 		/** Add a Team */
-		//$api->post('/teams?', '\TCCSolution\v1\Team:addTeam')->name('add_teams');
+		//$api->post('/teams?', '\TccSolution\v1\Team:addTeam')->name('add_teams');
 	
 		/** Get a single Team */
-		//$api->get('/teams/:teamId?', '\TCCSolution\v1\Team:getTeam')->name('get_team');
+		//$api->get('/teams/:teamId?', '\TccSolution\v1\Team:getTeam')->name('get_team');
 
 		/** Update a single Team */
-		//$api->patch('/teams/:teamId?', '\TCCSolution\v1\Team:updateTeam')->name('update_team');
+		//$api->patch('/teams/:teamId?', '\TccSolution\v1\Team:updateTeam')->name('update_team');
 	
 		/** Delete a Team */
-		//$api->delete('/teams/:teamId?', '\TCCSolution\v1\Team:deleteTeam')->name('delete_team');
+		//$api->delete('/teams/:teamId?', '\TccSolution\v1\Team:deleteTeam')->name('delete_team');
 
 		/** search Teams */
-		// $api->get('/teams/search?', '\TCCSolution\v1\Team:searchTeams')->name('search_teams');
+		// $api->get('/teams/search?', '\TccSolution\v1\Team:searchTeams')->name('search_teams');
 
 		/** Get all Robots */
-		//$api->get('/robots?', '\TCCSolution\v1\Robot:getRobots')->name('get_robots');
+		//$api->get('/robots?', '\TccSolution\v1\Robot:getRobots')->name('get_robots');
 		
 		/** Get Robots by Team */
-		//$api->get('/robots/team/:teamId:?', '\TCCSolution\v1\Robot:getRobotsByTeamId')->name('get_robots_by_team_id');
+		//$api->get('/robots/team/:teamId:?', '\TccSolution\v1\Robot:getRobotsByTeamId')->name('get_robots_by_team_id');
 
 		/** Get Robots by Event */
-		//$api->get('/robots/event/:eventId:?', '\TCCSolution\v1\Robot:getRobotsByEventId')->name('get_robots_by_event_id');
+		//$api->get('/robots/event/:eventId:?', '\TccSolution\v1\Robot:getRobotsByEventId')->name('get_robots_by_event_id');
 
 		/** Add a Robot */
-		//$api->post('/robots?', '\TCCSolution\v1\Robot:addRobot')->name('add_robots');
+		//$api->post('/robots?', '\TccSolution\v1\Robot:addRobot')->name('add_robots');
 	
 		/** Get a single Robot */
-		//$api->get('/robots/:robotId?', '\TCCSolution\v1\Robot:getRobot')->name('get_robot');
+		//$api->get('/robots/:robotId?', '\TccSolution\v1\Robot:getRobot')->name('get_robot');
 
 		/** Update a single Robot */
-		// $api->patch('/robots/:robotId?', '\TCCSolution\v1\Robot:updateRobot')->name('update_robot');
+		// $api->patch('/robots/:robotId?', '\TccSolution\v1\Robot:updateRobot')->name('update_robot');
 	
 		/** Delete a Robot */
-		// $api->delete('/robots/:robotId?', '\TCCSolution\v1\Robot:deletePerson')->name('delete_person');
+		// $api->delete('/robots/:robotId?', '\TccSolution\v1\Robot:deletePerson')->name('delete_person');
 
 		/** search Robots */
-		// $api->get('/robots/search?', '\TCCSolution\v1\Robot:searchRobots')->name('search_robots');
+		// $api->get('/robots/search?', '\TccSolution\v1\Robot:searchRobots')->name('search_robots');
 
 		// /** Get all Events */
-		//$api->get('/events?', '\TCCSolution\v1\Event:getEvents')->name('get_events');
+		//$api->get('/events?', '\TccSolution\v1\Event:getEvents')->name('get_events');
 		
 		// /** Add a Event */
-		//$api->post('/events?', '\TCCSolution\v1\Event:addEvent')->name('add_events');
+		//$api->post('/events?', '\TccSolution\v1\Event:addEvent')->name('add_events');
 	
 		// /** Get a single Event */
-		// $api->get('/events/:eventId?', '\TCCSolution\v1\Event:getEvent')->name('get_event');
+		// $api->get('/events/:eventId?', '\TccSolution\v1\Event:getEvent')->name('get_event');
 
 		// /** Update a single Event */
-		// $api->patch('/events/:eventId?', '\TCCSolution\v1\Event:updateEvent')->name('update_event');
+		// $api->patch('/events/:eventId?', '\TccSolution\v1\Event:updateEvent')->name('update_event');
 	
 		// /** Delete a Event */
-		// $api->delete('/events/:eventId?', '\TCCSolution\v1\Event:deleteEvent')->name('delete_event');
+		// $api->delete('/events/:eventId?', '\TccSolution\v1\Event:deleteEvent')->name('delete_event');
 
 		// /** search Events */
-		// $api->get('/events/search?', '\TCCSolution\v1\Event:searchEvents')->name('search_events');
+		// $api->get('/events/search?', '\TccSolution\v1\Event:searchEvents')->name('search_events');
 
 		/** Asaas */
-		//$api->put('/asaas/client/:personId?', '\TCCSolution\v1\Asaas:addClient')->name('add_client');
+		//$api->put('/asaas/client/:personId?', '\TccSolution\v1\Asaas:addClient')->name('add_client');
 
 
 		/** Grouping Category Endpoints */
 		$api->group('/category', function () use ($api) {
 			/** Get all Categories */
-			$api->get('/?', '\TCCSolution\v1\Category:getCategory')->name('get_category');
+			$api->get('/?', '\TccSolution\v1\Category:getCategory')->name('get_category');
 
 			/** Categories by Event */
-			//$api->get('/event/:eventId?', '\TCCSolution\v1\Category:getCategoryByEventId')->name('get_category_by_event_id');
+			//$api->get('/event/:eventId?', '\TccSolution\v1\Category:getCategoryByEventId')->name('get_category_by_event_id');
 			
 			/** Add a Category */
-			$api->post('/?', '\TCCSolution\v1\Category:addCategory')->name('add_category');
+			$api->post('/?', '\TccSolution\v1\Category:addCategory')->name('add_category');
 	
 		});
 		
